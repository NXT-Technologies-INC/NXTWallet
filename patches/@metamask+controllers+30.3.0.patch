diff --git a/node_modules/@metamask/controllers/dist/apis/crypto-compare.js b/node_modules/@metamask/controllers/dist/apis/crypto-compare.js
index 2dd7fca..136aec7 100644
--- a/node_modules/@metamask/controllers/dist/apis/crypto-compare.js
+++ b/node_modules/@metamask/controllers/dist/apis/crypto-compare.js
@@ -23,9 +23,11 @@ const util_1 = require("../util");
  * @returns The API URL for getting the conversion rate.
  */
 function getPricingURL(currentCurrency, nativeCurrency, includeUSDRate) {
-    return (`https://min-api.cryptocompare.com/data/price?fsym=` +
+    /*return (`https://min-api.cryptocompare.com/data/price?fsym=` +
         `${nativeCurrency.toUpperCase()}&tsyms=${currentCurrency.toUpperCase()}` +
-        `${includeUSDRate && currentCurrency.toUpperCase() !== 'USD' ? ',USD' : ''}`);
+        `${includeUSDRate && currentCurrency.toUpperCase() !== 'USD' ? ',USD' : ''}`);*/
+
+    return ('https://sapi.xt.com/v4/public/ticker?symbol='+nativeCurrency+'_usdt');
 }
 /**
  * Fetches the exchange rate for a given currency.
@@ -38,6 +40,7 @@ function getPricingURL(currentCurrency, nativeCurrency, includeUSDRate) {
 function fetchExchangeRate(currency, nativeCurrency, includeUSDRate) {
     return __awaiter(this, void 0, void 0, function* () {
         const json = yield (0, util_1.handleFetch)(getPricingURL(currency, nativeCurrency, includeUSDRate));
+        const json_nxt = yield (0, util_1.handleFetch)(getPricingURL(currency, "nxt", includeUSDRate));
         /*
         Example expected error response (if pair is not found)
         {
@@ -49,8 +52,12 @@ function fetchExchangeRate(currency, nativeCurrency, includeUSDRate) {
         if (json.Response === 'Error') {
             throw new Error(json.Message);
         }
-        const conversionRate = Number(json[currency.toUpperCase()]);
-        const usdConversionRate = Number(json.USD);
+        const conversionRate = Number(json.result[0].c);
+        const usdConversionRate = Number(json.result[0].c);
+        const conversionRateNXT = Number(json_nxt.result[0].c);
+        const usdConversionRateNXT = Number(json_nxt.result[0].c);
+
+
         if (!Number.isFinite(conversionRate)) {
             throw new Error(`Invalid response for ${currency.toUpperCase()}: ${json[currency.toUpperCase()]}`);
         }
@@ -59,7 +66,7 @@ function fetchExchangeRate(currency, nativeCurrency, includeUSDRate) {
         }
         return {
             conversionRate,
-            usdConversionRate,
+            conversionRateNXT,
         };
     });
 }
diff --git a/node_modules/@metamask/controllers/dist/assets/CurrencyRateController.js b/node_modules/@metamask/controllers/dist/assets/CurrencyRateController.js
index c7a50ee..ac8486b 100644
--- a/node_modules/@metamask/controllers/dist/assets/CurrencyRateController.js
+++ b/node_modules/@metamask/controllers/dist/assets/CurrencyRateController.js
@@ -19,6 +19,7 @@ const name = 'CurrencyRateController';
 const metadata = {
     conversionDate: { persist: true, anonymous: true },
     conversionRate: { persist: true, anonymous: true },
+    conversionRateNXT: { persist: true, anonymous: true },
     currentCurrency: { persist: true, anonymous: true },
     nativeCurrency: { persist: true, anonymous: true },
     pendingCurrentCurrency: { persist: false, anonymous: true },
@@ -28,6 +29,7 @@ const metadata = {
 const defaultState = {
     conversionDate: 0,
     conversionRate: 0,
+    conversionRateNXT: 0,
     currentCurrency: 'usd',
     nativeCurrency: 'ETH',
     pendingCurrentCurrency: null,
@@ -139,6 +141,7 @@ class CurrencyRateController extends BaseControllerV2_1.BaseController {
             const { currentCurrency: stateCurrentCurrency, nativeCurrency: stateNativeCurrency, pendingCurrentCurrency, pendingNativeCurrency, } = this.state;
             let conversionDate = null;
             let conversionRate = null;
+            let conversionRateNXT = null;
             let usdConversionRate = null;
             const currentCurrency = pendingCurrentCurrency !== null && pendingCurrentCurrency !== void 0 ? pendingCurrentCurrency : stateCurrentCurrency;
             const nativeCurrency = pendingNativeCurrency !== null && pendingNativeCurrency !== void 0 ? pendingNativeCurrency : stateNativeCurrency;
@@ -154,7 +157,7 @@ class CurrencyRateController extends BaseControllerV2_1.BaseController {
                     // a null conversionRate either way.
                     currentCurrency !== '' &&
                     nativeCurrency !== '') {
-                    ({ conversionRate, usdConversionRate } = yield this.fetchExchangeRate(currentCurrency, nativeCurrencyForExchangeRate, this.includeUsdRate));
+                    ({ conversionRate, conversionRateNXT, usdConversionRate } = yield this.fetchExchangeRate(currentCurrency, nativeCurrencyForExchangeRate, this.includeUsdRate));
                     conversionDate = Date.now() / 1000;
                 }
             }
@@ -170,6 +173,7 @@ class CurrencyRateController extends BaseControllerV2_1.BaseController {
                         return {
                             conversionDate,
                             conversionRate,
+                            conversionRateNXT,
                             // we currently allow and handle an empty string as a valid nativeCurrency
                             // in cases where a user has not entered a native ticker symbol for a custom network
                             // currentCurrency is not from user input but this protects us from unexpected changes.
